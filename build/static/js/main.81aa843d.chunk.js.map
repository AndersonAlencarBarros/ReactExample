{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","src","BoasVindas","props","name","last","ActionLink","href","onClick","e","preventDefault","console","log","greetings","React","createElement","className","Clock","state","date","Date","this","timerID","setInterval","tick","clearInterval","setState","toLocaleTimeString","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCEF,6BACI,6BACI,4BAAI,uCACJ,yBAAKC,IAAI,8IAQrB,SAASC,EAAYC,GACjB,OAAO,0CAAgBA,EAAMC,KAAtB,IAA6BD,EAAME,MAO9B,kBAACH,EAAD,CAAYE,KAAK,WAAWC,KAAK,YAoCjD,SAASC,IAML,OACA,gCACE,uBAAGC,KAAK,IAAIC,QAPd,SAAqBC,GACnBA,EAAEC,iBACFC,QAAQC,IAAI,2BAKZ,aAQN,IAAMC,EAAYC,IAAMC,cACpB,KACA,CAACC,UAAW,SACZ,UAIEC,E,YACF,WAAYd,GAAQ,IAAD,8BACjB,4CAAMA,KACDe,MAAQ,CAACC,KAAM,IAAIC,MAFP,E,iFAQC,IAAD,OACfC,KAAKC,QAAUC,aACX,kBAAM,EAAKC,SAAQ,O,6CAMvBC,cAAcJ,KAAKC,W,6BAKnBD,KAAKK,SAAS,CACVP,KAAM,IAAIC,S,+BAKhB,OACE,6BACE,uCAAUC,KAAKH,MAAMC,KAAKQ,qBAA1B,U,GA9BUb,IAAMc,WAoC1BC,IAASC,OAEL,mBAtFJ,WACI,OACI,6BACI,6BACI,4BAAI,4BAAKjB,IACT,yBAAKZ,IAAI,6IAGb,6BACI,kBAACC,EAAD,CAAYE,KAAK,cACjB,kBAACF,EAAD,CAAYE,KAAK,QACjB,kBAACF,EAAD,CAAYE,KAAK,UAGrB,6BACI,kBAAC,EAAD,OAGJ,6BACI,kBAACE,EAAD,UAmEZ,MAEAyB,SAASC,eAAe,SDTtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.81aa843d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// <App /> funcao principal que contem todos os \r\n// os outros componentes\r\n// ReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nfunction formatName(user){\r\n    return user.firstName + ' ' + user.lastName;\r\n}\r\n\r\nconst user = {\r\n    firstName: 'Anderson',\r\n    lastName: 'Alencar'\r\n}\r\n\r\nconst sunset = (\r\n    <div> \r\n        <div> \r\n            <h1><em>Sunset</em></h1>\r\n            <img src=\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse4.mm.bing.net%2Fth%3Fid%3DOIP.dWfOYXNXp-qIuJGY4yQ3JAHaHa%26pid%3DApi&f=1\" />\r\n        </div>\r\n    </div>\r\n);\r\n\r\n// Exemplo do uso de 'props':\r\n// A seguir sera definida um componente 'BoasVindas'\r\n// que receberao 'name' e 'last' como props\r\nfunction BoasVindas (props){\r\n    return <h5>Bem Vindo, {props.name} {props.last}</h5>;\r\n}\r\n\r\n// define um componente do usuario 'BoasVindas' \r\n// como uma a funcao predefinida\r\n// e envia os atributos 'name' e 'last',\r\n// esses atributos sao chamados de 'props'  \r\nconst welcome = <BoasVindas name=\"Anderson\" last=\"Alencar\" /> \r\n\r\n// ou, de forma equivalente\r\n// class Welcome extends React.Component{\r\n//     render(){\r\n//         return <h1> Bem Vindo, {this.props.name}</h1> ;\r\n//     }\r\n// }\r\n\r\n// a funcao 'App' por padrao é definida uma vez \r\n// e usada para chamar todos os outros componentes\r\nfunction App (){\r\n    return(\r\n        <div>             \r\n            <div> \r\n                <h1><em>{greetings}</em></h1>\r\n                <img src=\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse4.mm.bing.net%2Fth%3Fid%3DOIP.dWfOYXNXp-qIuJGY4yQ3JAHaHa%26pid%3DApi&f=1\" />\r\n            </div>\r\n            \r\n            <div>\r\n                <BoasVindas name=\"AeroNildo\" />\r\n                <BoasVindas name=\"Ana\" />\r\n                <BoasVindas name=\"John\" />\r\n            </div>\r\n\r\n            <div>\r\n                <Clock />\r\n            </div>\r\n            \r\n            <div>    \r\n                <ActionLink />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ActionLink() {\r\n    function handleClick(e) {\r\n      e.preventDefault();\r\n      console.log('The link was clicked.');\r\n    }\r\n  \r\n    return (\r\n    <button>\r\n      <a href=\"#\" onClick={handleClick}>\r\n        Click me\r\n      </a>\r\n      </button>\r\n    );\r\n}\r\n\r\n// Equivalente a <h1 className=\"title\">Sunset</h1>\r\nconst greetings = React.createElement(\r\n    'h1',\r\n    {className: 'title'},\r\n    'Sunset'\r\n);\r\n\r\n// Exemplo de State e Lifecycle\r\nclass Clock extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {date: new Date()};\r\n    }\r\n\r\n    // Lifecycle methods - destruir componentes \r\n    // 'componentDidMount' executa quando o componente \r\n    // é renderizado na DOM \r\n    componentDidMount(){\r\n        this.timerID = setInterval(\r\n            () => this.tick(), 1000\r\n        );\r\n    }\r\n\r\n    // Executando quando o componente é removido da DOM\r\n    componentWillUnmount(){\r\n        clearInterval(this.timerID);\r\n    }\r\n\r\n    // setState() é responsavel por atualizar o state.\r\n    tick(){\r\n        this.setState({\r\n            date: new Date()\r\n        });\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div>   \r\n          <h5> São {this.state.date.toLocaleTimeString()}.</h5>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n   \r\nReactDOM.render(\r\n    // sunset,\r\n    <App />,\r\n    // welcome,\r\n    document.getElementById('root')\r\n);\r\n\r\n \r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n// Exemplo de uso de componentes \r\n// como o codigo pode ser modularizado\r\n// e separado em pequenas partes\r\n\r\n/*\r\nfunction Avatar(props){\r\n    return(\r\n        <img className=\"Avatar\"\r\n            src={props.user.avatarUrl}\r\n            alt={props.user.name} \r\n        />\r\n    );\r\n}\r\n\r\nfunction UserInfo(props){\r\n    return(\r\n        <div className=\"UserInfo\">\r\n            <Avatar user={props.user} />\r\n            <div className=\"UserInfo-name\">\r\n                {props.user.name}\r\n            </div>\r\n        </div>    \r\n    );\r\n}\r\n\r\n\r\nfunction Comment (props){\r\n    return(\r\n        <div className=\"Comment\"> \r\n            <UserInfo user={props.author} />\r\n        <div className=\"Comment-text\">\r\n            {props.text}\r\n        </div>\r\n        <div className=\"Comment-date\">\r\n            {formatDate(props.date)}\r\n        </div>       \r\n        </div>\r\n    );\r\n} */"],"sourceRoot":""}